// Default

resources
| where type =~ 'microsoft.compute/virtualmachines'
| extend vmId = tolower(id)
| extend VMSize=properties.hardwareProfile.vmSize, OSType=properties.storageProfile.osDisk.osType,vmID=properties.hardware,resourceId = id
| extend vmStatus = tostring(properties.extended.instanceView.powerState.displayStatus)
| extend vmStatus = case(
        tolower(vmStatus) == "vm running", "Running",
        tolower(vmStatus) in ("vm stopped", "vm deallocated"), "Stopped",
        vmStatus)
| project vmId,resourceId, vmName = name, resourceGroup, subscriptionId, location,vmStatus
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | extend vmNicId = tolower(properties.virtualMachine.id)
    | mv-expand ipconfig = properties.ipConfigurations
    | extend 
        nicId = tolower(id),
        privateIp = tostring(ipconfig.properties.privateIPAddress),
        publicIp= tostring(ipconfig.properties.publicIPAddress),
        publicIpId = tostring(ipconfig.properties.publicIPAddress.id)
    | project privateIp,publicIp, publicIpId,vmNicId, nicId, nicName = name
) on $left.vmId == $right.vmNicId
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/publicipaddresses'
    | project publicIpId = id, publicIpAddress = tostring(properties.ipAddress)
) on publicIpId
| project 
    vmName,
    resourceId,
    subscriptionId,
    resourceGroup,
    location,
    privateIp,
    publicIpAddress,
    vmStatus
| join kind=leftouter (
    resourcecontainers
    | where type =~ 'microsoft.resources/subscriptions'
    | project 
        subscriptionId,
        subscriptionName = name
) on subscriptionId
| project 
    vmName,
    vmStatus,
    privateIp,
    publicIpAddress,
    subscriptionName,
    resourceGroup,
    location,
    resourceId,
    subscriptionId

// -------------------------------------------------------------------------------------------

// show VM and all NIc and NSG
// Part 1: VMs with NIC-level NSG rules allowing 0.0.0.0/0
let NicExposedVMs = resources
| where type == "microsoft.compute/virtualmachines"
| extend vmId = tolower(id)
| join kind=leftouter (
    resources
    | where type == "microsoft.network/networkinterfaces"
    | extend nicProperties = properties
    | project nicId = tolower(id), nicName = name, vmRef = tolower(properties.virtualMachine.id), 
              nsgRef = tolower(properties.networkSecurityGroup.id), subnetRef = tolower(properties.ipConfigurations[0].properties.subnet.id),
              publicIP = iff(array_length(properties.ipConfigurations) > 0 and isnotempty(properties.ipConfigurations[0].properties.publicIPAddress), "Yes", "No")
) on $left.vmId == $right.vmRef
| where isnotempty(nicId)
| join kind=leftouter (
    resources
    | where type == "microsoft.network/networksecuritygroups"
    | extend nsgId = tolower(id), nsgRules = properties.securityRules
    | mv-expand nsgRules
    | where nsgRules.properties.direction == "Inbound"
    | where nsgRules.properties.sourceAddressPrefix == "0.0.0.0/0" or array_length(nsgRules.properties.sourceAddressPrefixes) > 0 and "0.0.0.0/0" in (nsgRules.properties.sourceAddressPrefixes)
    | project nsgId, ruleName = nsgRules.name, destinationPortRange = nsgRules.properties.destinationPortRange, protocol = nsgRules.properties.protocol
) on $left.nsgRef == $right.nsgId
| where isnotempty(ruleName)
| project vmName = name, subscriptionId, resourceGroup, location, nicName, publicIP, 
          exposedVia = "NIC", ruleName, destinationPortRange, protocol;

// Part 2: VMs with Subnet-level NSG rules allowing 0.0.0.0/0
let SubnetExposedVMs = resources
| where type == "microsoft.compute/virtualmachines"
| extend vmId = tolower(id)
| join kind=leftouter (
    Resources
    | where type == "microsoft.network/networkinterfaces"
    | project nicId = tolower(id), nicName = name, vmRef = tolower(properties.virtualMachine.id), 
              subnetRef = tolower(properties.ipConfigurations[0].properties.subnet.id),
              publicIP = iff(array_length(properties.ipConfigurations) > 0 and isnotempty(properties.ipConfigurations[0].properties.publicIPAddress), "Yes", "No")
) on $left.vmId == $right.vmRef
| where isnotempty(nicId)
| join kind=leftouter (
    resources
    | where type == "microsoft.network/virtualnetworks"
    | mv-expand subnet = properties.subnets
    | extend subnetId = tolower(subnet.id), subnetNsgRef = tolower(subnet.properties.networkSecurityGroup.id)
    | project subnetId, subnetNsgRef
) on $left.subnetRef == $right.subnetId
| join kind=leftouter (
    resources
    | where type == "microsoft.network/networksecuritygroups"
    | extend nsgId = tolower(id), nsgRules = properties.securityRules
    | mv-expand nsgRules
    | where nsgRules.properties.direction == "Inbound"
    | where nsgRules.properties.sourceAddressPrefix == "0.0.0.0/0" or array_length(nsgRules.properties.sourceAddressPrefixes) > 0 and "0.0.0.0/0" in (nsgRules.properties.sourceAddressPrefixes)
    | project nsgId, ruleName = nsgRules.name, destinationPortRange = nsgRules.properties.destinationPortRange, protocol = nsgRules.properties.protocol
) on $left.subnetNsgRef == $right.nsgId
| where isnotempty(ruleName)
| project vmName = name, subscriptionId, resourceGroup, location, nicName, publicIP, 
          exposedVia = "Subnet", ruleName, destinationPortRange, protocol;

// Combine results
NicExposedVMs
| union SubnetExposedVMs
| order by vmName asc

// ---------------------------------------------------------------------------------------------

//shows VM, NAME, NIC, PrivateIP, Public IP

Resources
| where type =~ 'microsoft.compute/virtualmachines'
| project 
    vmId = id, 
    vmName = name, 
    resourceGroup, 
    subscriptionId, 
    location, 
    networkInterfaces = properties.networkProfile.networkInterfaces
| mv-expand networkInterfaces
| project 
    vmId, 
    vmName, 
    resourceGroup, 
    subscriptionId, 
    location, 
    nicId = tostring(networkInterfaces.id)
| join kind=leftouter (
    Resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | project 
        nicId = id, 
        nicName = name, 
        primary = tostring(properties.primary), 
        privateIp = properties.ipConfigurations[0].properties.privateIPAddress,
        macAddress = tostring(properties.macAddress)
) on nicId
| project-away nicId1
| project 
    vmId, 
    vmName, 
    resourceGroup, 
    subscriptionId, 
    location, 
    nicId, 
    nicName, 
    primary, 
    privateIp, 
    macAddress


//-------------------------------------------------------------------------------------
// show
// vmnane, status, privateIP, pubP, macAddr, subName,rgName, location, resourceId, subID

resources
| where type =~ 'microsoft.compute/virtualmachines'
| extend vmId = tolower(id)
| extend VMSize=properties.hardwareProfile.vmSize, OSType=properties.storageProfile.osDisk.osType,vmID=properties.hardware,resourceId = id
| extend vmStatus = tostring(properties.extended.instanceView.powerState.displayStatus)
| extend vmStatus = case(
        tolower(vmStatus) == "vm running", "Running",
        tolower(vmStatus) in ("vm stopped", "vm deallocated"), "Stopped",
        vmStatus)
| project vmId,resourceId, vmName = name, resourceGroup, subscriptionId, location,vmStatus
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | extend vmNicId = tolower(properties.virtualMachine.id)
    | mv-expand ipconfig = properties.ipConfigurations
    | extend 
        nicId = tolower(id),
        privateIp = tostring(ipconfig.properties.privateIPAddress),
        publicIp= tostring(ipconfig.properties.publicIPAddress),
        publicIpId = tostring(ipconfig.properties.publicIPAddress.id),
        macAddress = tostring(properties.macAddress)
    | project privateIp,publicIp, publicIpId,vmNicId, nicId, nicName = name,macAddress
) on $left.vmId == $right.vmNicId
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/publicipaddresses'
    | project publicIpId = id, publicIpAddress = tostring(properties.ipAddress)
) on publicIpId
| project 
    vmName,
    resourceId,
    subscriptionId,
    resourceGroup,
    location,
    privateIp,
    publicIpAddress,
    vmStatus,
    macAddress
| join kind=leftouter (
    resourcecontainers
    | where type =~ 'microsoft.resources/subscriptions'
    | project 
        subscriptionId,
        subscriptionName = name
) on subscriptionId
| project 
    vmName,
    vmStatus,
    privateIp,
    publicIpAddress,
    macAddress,
    subscriptionName,
    resourceGroup,
    location,
    resourceId,
    subscriptionId

    ///------------------------------------------------------------------------
    // show vm 

    resources
| where type =~ 'microsoft.compute/virtualmachines'
| extend azure_vmID = tostring(properties.vmId)
| extend 
    azure_resourceID= tolower(id),
    VMSize=properties.hardwareProfile.vmSize,
    OSType=properties.storageProfile.osDisk.osType,
    vmID=properties.hardware,
    vmStatus = tostring(properties.extended.instanceView.powerState.displayStatus),
    osType=properties.storageProfile.osDisk.osType,
    osInfo=properties.storageProfile.imageReference.exactVersion
| extend vmStatus = case(
        tolower(vmStatus) == "vm running", "Running",
        tolower(vmStatus) in ("vm stopped", "vm deallocated"), "Stopped",
        vmStatus)
| project 
    azure_resourceID,
    azure_vmID,
    vmName = name,
    resourceGroup,
    subscriptionId,
    location,
    vmStatus,
    tags,
    osType,
    osInfo
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | extend vmNicId = tolower(properties.virtualMachine.id)
    | mv-expand ipconfig = properties.ipConfigurations
    | extend 
        nicId = tolower(id),
        privateIp = tostring(ipconfig.properties.privateIPAddress),
        publicIp= tostring(ipconfig.properties.publicIPAddress),
        publicIpId = tostring(ipconfig.properties.publicIPAddress.id),
        macAddress = tostring(properties.macAddress)
    | project privateIp,publicIp, publicIpId,vmNicId, nicId, nicName = name,macAddress
) on $left.azure_resourceID== $right.vmNicId
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/publicipaddresses'
    | project publicIpId = id, publicIpAddress = tostring(properties.ipAddress)
) on publicIpId
| project 
    vmName,
    azure_vmID,
    subscriptionId,
    resourceGroup,
    location,
    privateIp,
    publicIpAddress,
    vmStatus,
    macAddress,
    azure_resourceID,
    osType,
    osInfo
| join kind=leftouter (
    resourcecontainers
    | where type =~ 'microsoft.resources/subscriptions'
    | project 
        subscriptionId,
        subscriptionName = name
) on subscriptionId
| project 
    azure_vmName,
    azure_vmStatus,
    azure_privateIp,
    azure_publicIpAddress,
    azure_vm_macAddress,
    azure_resourceID,
    azure_vmID,
    azure_subscriptionName,
    azure_resourceGroup,
    azure_location,
    azure_subscriptionId,
    azure_vm_osType,
    azure_osInfo


    //================================================================
    // 23 Mar 25

    resources
| where type =~ 'microsoft.compute/virtualmachines'
| extend azure_vmID = tostring(properties.vmId)
| extend 
    azure_vmName=name,
    azure_resourceID= tolower(id),
    VMSize=properties.hardwareProfile.vmSize,
    azure_vm_osType=properties.storageProfile.osDisk.osType,
    vmID=properties.hardware,
    azure_vmStatus = tostring(properties.extended.instanceView.powerState.displayStatus),
    azure_osVersion=properties.storageProfile.imageReference.exactVersion,
    azure_subscriptionId=subscriptionId,
    azure_location = location,
    azure_resourceGroup=resourceGroup
| extend azure_vmStatus = case(
        tolower(azure_vmStatus) == "vm running", "Running",
        tolower(azure_vmStatus) in ("vm stopped", "vm deallocated"), "Stopped",
        azure_vmStatus)
| project 
    azure_resourceID,
    azure_vmID,
    azure_vmName,
    azure_resourceGroup,
    azure_subscriptionId,
    azure_location,
    azure_vmStatus,
    tags,
    azure_vm_osType,
    azure_osVersion
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | extend vmNicId = tolower(properties.virtualMachine.id)
    | mv-expand ipconfig = properties.ipConfigurations
    | extend 
        nicId = tolower(id),
        azure_privateIp = tostring(ipconfig.properties.privateIPAddress),
        azure_publicIp= tostring(ipconfig.properties.publicIPAddress),
        azure_publicIpId = tostring(ipconfig.properties.publicIPAddress.id),
        azure_vm_macAddress = tostring(properties.macAddress)
    | project azure_privateIp,azure_publicIp, azure_publicIpId,vmNicId, nicId, nicName = name,azure_vm_macAddress
) on $left.azure_resourceID== $right.vmNicId
| join kind=leftouter (
    resources
    | where type =~ 'microsoft.network/publicipaddresses'
    | project azure_publicIpId = id, azure_publicIp = tostring(properties.ipAddress)
) on azure_publicIpId
| project 
    azure_vmName,
    azure_vmID,
    azure_subscriptionId,
    azure_resourceGroup,
    azure_location,
    azure_privateIp,
    azure_publicIp,
    azure_vmStatus,
    azure_vm_macAddress,
    azure_resourceID,
    azure_vm_osType,
    azure_osVersion
| join kind=leftouter (
    resourcecontainers
    | where type =~ 'microsoft.resources/subscriptions'
    | project 
        azure_subscriptionId=subscriptionId,
        azure_subscriptionName = name
) on azure_subscriptionId
| project 
    azure_vmName,
    azure_vmStatus,
    azure_privateIp,
    azure_publicIp,
    azure_vm_macAddress,
    azure_resourceID,
    azure_vmID,
    azure_subscriptionName,
    azure_resourceGroup,
    azure_subscriptionId,
    azure_location,
    azure_vm_osType,
    azure_osVersion